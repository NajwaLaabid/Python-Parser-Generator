program = #program #id #( identifier_list #) #; declarations subprogram_declarations compound_statement #.
identifier_list = #id identifier_next
identifier_next = #, identifier_list | e
declarations = #var identifier_list #: type #; declarations | e
type = #array #[ #num #. #. #num #] #of standard_type | standard_type
standard_type = #integer | #real
subprogram_declarations = subprogram_declaration subprogram_declaration_next
subprogram_declaration_next = #; subprogram_declarations | e
subprogram_declaration = subprogram_head declarations compound_statement
subprogram_head = #function #id arguments #: standard_type #; | #procedure #id arguments #;
arguments = #( parameter_list #) | e
parameter_list = identifier_list #: type parameter_list_next
parameter_list_next = #; parameter_list | e
compound_statement = #begin compound_statement_next
compound_statement_next = statement_list #end | #end
statement_list = statement statement_list_next
statement_list_next = #; statement_list | e
statement = #id var_or_proc | compound_statement | #if expression #then statement #else statement | #while expression #do statement
var_or_proc = #assignop expression | #( expression_list #) | #[ expression #] #assignop expression | e
expression_list = expression expression_list_next
expression_list_next = #, expression_list | e
expression = simple_expression expression_next
expression_next = #relop simple_expression | e
simple_expression = term | sign term | term #addop simple_expression
term = factor term_next
term_next = #mulop term | e
factor = #id factor_next | #num | #( expression #) | #not factor
factor_next = #( expression_list #) | e 
sign = #+ | #-